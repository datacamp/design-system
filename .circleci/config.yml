$schema: https://json.schemastore.org/circleciconfig#
version: 2.1
orbs:
  queue: eddiewebb/queue@1.6.4
  datacamp-deploy-branch: datacamp/deploy-branch@1
  datacamp-artifactory: datacamp/artifactory@1
  datacamp-ecr: datacamp/ecr@1
  datacamp-deploy: datacamp/deploy@2
  slack: circleci/slack@3.4.1
  datacamp-circleci: datacamp/central-ci@1
jobs:
  build:
    docker:
      - image: circleci/node:14.16.0-browsers
    steps:
      - checkout
      - run:
          name: Add npmrc
          command: |
            echo "//registry.npmjs.org/:_authToken=${NPM_TOKEN}" > .npmrc
            echo "always-auth=true" >> .npmrc
      - run:
          name: Install lerna
          command: yarn global add lerna
      - restore_cache:
          name: Restore Yarn Package Cache
          keys:
            - yarn-packages-{{ checksum "yarn.lock" }}
            - yarn-packages-
      - run:
          name: Install and Build
          command: yarn bootstrap
      - save_cache:
          name: Save Yarn Package Cache
          key: yarn-packages-{{ checksum "yarn.lock" }}
          paths:
            - ~/.cache/yarn
      - persist_to_workspace:
          root: '.'
          paths:
            - ./**
  test:
    docker:
      - image: circleci/node:14.16.0-browsers
    steps:
      - attach_workspace:
          at: '.'
      - run:
          name: Lint
          command: yarn lint
      - run:
          name: Lint commits
          command: yarn commitlint:ci
      - run:
          name: Test
          command: yarn test
      - run:
          name: Check types
          command: yarn type-check
  cypress-test-storybook:
    docker:
      - image: cypress/browsers:node14.16.0-chrome89-ff86
    steps:
      - attach_workspace:
          at: '.'
      - run:
          name: Install cypress binaries
          command: yarn cypress install
          working_directory: ~/project/packages/docs/storybook
      - run:
          name: Launch storybook
          command: yarn start
          working_directory: ~/project/packages/docs/storybook
          background: true
      - run:
          name: Run cypress
          command: yarn cypress:ci
          working_directory: ~/project/packages/docs/storybook
  upload-to-percy:
    docker:
      - image: circleci/node:14.16.0-browsers
    steps:
      - attach_workspace:
          at: '.'
      - run:
          name: Upload to percy
          command: yarn percy
  deploy-staging-site:
    docker:
      - image: ${STAGING_ECR_URL}/docker-deploy
        aws_auth:
          aws_access_key_id: $STAGING_AWS_ACCESS_KEY_ID
          aws_secret_access_key: $STAGING_AWS_SECRET_ACCESS_KEY
    environment:
      BUCKET: waffles
    steps:
      - attach_workspace:
          at: '.'
      - run:
          name: S3 Sync
          command: |
            export AWS_ACCESS_KEY_ID=${STAGING_AWS_ACCESS_KEY_ID}
            export AWS_SECRET_ACCESS_KEY=${STAGING_AWS_SECRET_ACCESS_KEY}
            aws s3 rm s3://${BUCKET}.datacamp-staging.com/ --recursive
            aws s3 sync packages/docs/next-doc-site/build s3://${BUCKET}.datacamp-staging.com/ --acl public-read --exclude "*.js" --exclude "*.svg" --exclude "*.png" --exclude "*.jpg" --exclude "*.woff" --exclude "*.woff2" --cache-control public,max-age=0,must-revalidate
            aws s3 sync packages/docs/next-doc-site/build s3://${BUCKET}.datacamp-staging.com/ --acl public-read --exclude "*" --include "*.js" --cache-control public,max-age=31536000,immutable
            aws s3 sync packages/docs/next-doc-site/build s3://${BUCKET}.datacamp-staging.com/ --acl public-read --exclude "*" --include "*.svg" --include "*.png" --include "*.jpg" --include "*.woff" --include "*.woff2" --cache-control public,max-age=31536000,immutable,no-transform
  deploy-doc-site:
    docker:
      - image: ${STAGING_ECR_URL}/docker-deploy
        aws_auth:
          aws_access_key_id: $STAGING_AWS_ACCESS_KEY_ID
          aws_secret_access_key: $STAGING_AWS_SECRET_ACCESS_KEY
    environment:
      BUCKET: waffles
    steps:
      - attach_workspace:
          at: '.'
      - run:
          name: S3 Sync
          command: |
            export AWS_ACCESS_KEY_ID=${PROD_AWS_ACCESS_KEY_ID}
            export AWS_SECRET_ACCESS_KEY=${PROD_AWS_SECRET_ACCESS_KEY}
            aws s3 rm s3://${BUCKET}.new.datacamp.com/ --exclude "*le-components/*" --recursive
            aws s3 sync packages/docs/next-doc-site/build s3://${BUCKET}.new.datacamp.com/ --acl public-read --exclude "*.js" --exclude "*.svg" --exclude "*.png" --exclude "*.jpg" --exclude "*.woff" --exclude "*.woff2" --cache-control public,max-age=0,must-revalidate
            aws s3 sync packages/docs/next-doc-site/build s3://${BUCKET}.new.datacamp.com/ --acl public-read --exclude "*" --include "*.js" --cache-control public,max-age=31536000,immutable
            aws s3 sync packages/docs/next-doc-site/build s3://${BUCKET}.new.datacamp.com/ --acl public-read --exclude "*" --include "*.svg" --include "*.png" --include "*.jpg" --include "*.woff" --include "*.woff2" --cache-control public,max-age=31536000,immutable,no-transform
  # deploy-beta-site:
  #   docker:
  #     - image: ${STAGING_ECR_URL}/docker-deploy
  #       aws_auth:
  #         aws_access_key_id: $STAGING_AWS_ACCESS_KEY_ID
  #         aws_secret_access_key: $STAGING_AWS_SECRET_ACCESS_KEY
  #   environment:
  #     BUCKET: waffles-beta
  #   steps:
  #     - attach_workspace:
  #         at: '.'
  #     - run:
  #         name: S3 Sync
  #         command: |
  #           export AWS_ACCESS_KEY_ID=${PROD_AWS_ACCESS_KEY_ID}
  #           export AWS_SECRET_ACCESS_KEY=${PROD_AWS_SECRET_ACCESS_KEY}
  #           aws s3 sync --delete --acl public-read packages/docs/catalog-doc-site/catalog/build s3://${BUCKET}.datacamp.com/live
  #           #aws s3 sync --acl public-read packages/docs/catalog-doc-site/catalog/build/static/media s3://${BUCKET}.datacamp.com/live/media
  #     - run:
  #         name: Invalidate Cache
  #         command: |
  #           export AWS_ACCESS_KEY_ID=$PROD_AWS_ACCESS_KEY_ID
  #           export AWS_SECRET_ACCESS_KEY=$PROD_AWS_SECRET_ACCESS_KEY
  #           aws cloudfront create-invalidation --distribution-id ${BETA_CLOUDFRONT_ID} --paths "/index.html"
  mutation-test:
    resource_class: xlarge
    docker:
      - image: circleci/node:12.13-browsers
    steps:
      - attach_workspace:
          at: '.'
      - run:
          name: stryker mutation tests
          command: yarn stryker
      - persist_to_workspace:
          root: '.'
          paths:
            - ./**
  send-to-slack:
    docker:
      - image: circleci/node
    steps:
      - slack/notify:
          message: Available to view at https://waffles-stryker-report.datacamp-staging.com/ (needs VPN)
          include_project_field: false
          include_job_number_field: false
          include_visit_job_action: false
          title: Check it party people, the mutation test results are in
          color: '#33aacc'
          channel: '#design-system-squad'
workflows:
# BEGIN ANSIBLE MANAGED BLOCK
  build-and-deploy-eks:
    jobs:
      - queue/block_workflow:
          name: queue
          context: org-global
          time: '10'
          filters:
            branches:
              ignore:
                - /backstage\/.*/

      - datacamp-artifactory/build_and_push_image_to_artifactory: &dockerBuild
          name: docker-build
          context: org-global
          extra-docker-args: '--build-arg VERSION=$(git describe --tags)'
          dockerfile: Dockerfile
          docker-version: 20.10.2
          executor: datacamp-artifactory/buildkit
          pre-build-steps:
            - run:
                name: Add npmrc
                command: |
                  echo "//registry.npmjs.org/:_authToken=${NPM_TOKEN}" > .npmrc
                  echo "always-auth=true" >> .npmrc
            - run:
                name: Install lerna
                command: yarn global add lerna
            - restore_cache:
                name: Restore Yarn Package Cache
                keys:
                  - yarn-packages-{{ checksum "yarn.lock" }}
                  - yarn-packages-
            - run:
                name: Install and Build
                command: yarn bootstrap
            - save_cache:
                name: Save Yarn Package Cache
                key: yarn-packages-{{ checksum "yarn.lock" }}
                paths:
                  - ~/.cache/yarn
                requires:
                  - queue

      - datacamp-artifactory/tag_repository:
          name: tag
          context: org-global
          requires:
            - docker-build
            - queue
          filters:
            branches:
              only:
                - master
  deploy-backstage:
    jobs:
      - datacamp-artifactory/build_and_push_image_to_artifactory:
          name: docker-build
          context: org-global
          extra-docker-args: "--build-arg NPM_TOKEN=${NPM_TOKEN}"
          dockerfile: Dockerfile
          docker-version: 20.10.2
          executor: datacamp-artifactory/buildkit
          filters:
            branches:
              only:
                - /backstage\/.*/
      - datacamp-deploy-branch/deploy: # Backstage branch deploy
          name: deploy-to-backstage
          context: org-global
          app: design-system
          env: staging
          roles: terraform-role,k8s-role
          region: us-east-1
          extra-vars: "backstage=true"
          filters:
            branches:
              only:
                - /backstage\/.*/
          requires:
            - docker-build

      - testing-complete: # <<< Require a manual approval to cleandown
          type: approval
          requires:
            - deploy-to-backstage
          filters:
            branches:
              only:
                - /backstage\/.*/

      - datacamp-deploy-branch/deploy:
          name: cleandown-backstage
          context: org-global
          app: design-system
          env: staging
          roles: app-cleandown-role
          extra-vars: 'backstage=true'
          filters:
            branches:
              only:
                - /backstage\/.*/
          requires:
            - testing-complete
# END ANSIBLE MANAGED BLOCK
  version: 2
  run_mutation_testing:
    triggers:
      - schedule:
          cron: '0 0 * * 5'
          filters:
            branches:
              only:
                - master
    jobs:
      - build:
          context: org-global
      - mutation-test:
          requires:
            - build
          context: org-global
      - datacamp-ecr/build_and_push_image_to_ecr:
          requires:
            - mutation-test
          name: push-stryker-image
          context: org-global
          aws-access-key-id: $OPS_AWS_ACCESS_KEY_ID
          aws-secret-access-key: $OPS_AWS_SECRET_ACCESS_KEY
          account-url: $OPS_ECR_URL
          puller-account-ids: '["301258414863", "487088987264"]'
          repo: waffles-stryker-report
          pre-build-steps:
            - attach_workspace:
                at: '.'
      - datacamp-deploy/deploy:
          name: deploy-stryker-report
          context: org-global
          aws-access-key-id: $STAGING_AWS_ACCESS_KEY_ID
          aws-secret-access-key: $STAGING_AWS_SECRET_ACCESS_KEY
          environment: staging
          requires:
            - push-stryker-image
      - send-to-slack:
          context: org-global
          requires:
            - deploy-stryker-report
  do_everything:
    jobs:
      - build:
          context: org-global
          filters:
            tags:
              only: /.*/
      - test:
          requires:
            - build
          context: org-global
          filters:
            tags:
              only: /.*/
      - cypress-test-storybook:
          requires:
            - build
          context: org-global
          filters:
            tags:
              only: /.*/
      # - datacamp-circleci/scan:
      #     context: org-global
      #     after-checkout:
      #       - attach_workspace:
      #           at: '.'
      #     requires:
      #       - test
      - hold-for-pr:
          type: approval
          context: org-global
          filters:
            tags:
              only: /.*/
            branches:
              ignore: /master/
      - upload-to-percy:
          requires:
            - test
            - cypress-test-storybook
            - hold-for-pr
          context: org-global
      # - datacamp-ecr/build_and_push_image_to_ecr:
      #     requires:
      #       - test
      #       - cypress-test-storybook
      #       - hold-for-pr
      #     name: push-storybook-image
      #     context: org-global
      #     aws-access-key-id: $OPS_AWS_ACCESS_KEY_ID
      #     aws-secret-access-key: $OPS_AWS_SECRET_ACCESS_KEY
      #     account-url: $OPS_ECR_URL
      #     puller-account-ids: '["301258414863", "487088987264"]'
      #     repo: waffles-storybook
      #     path: packages/docs/storybook
      #     dockerfile: packages/docs/storybook/Dockerfile
      #     pre-build-steps:
      #       - attach_workspace:
      #           at: '.'
      #     filters:
      #       branches:
      #         ignore:
      #           - master
      #           - /dependabot.*/
      # - datacamp-deploy/backstage-deploy: # backstage
      #     name: deploy-storybook
      #     context: org-global
      #     file: packages/docs/storybook/ecs.backstage.json
      #     extra-env: "BRANCH=${CIRCLE_BRANCH//\\//-}"
      #     requires:
      #       - push-storybook-image
      - deploy-staging-site:
          requires:
            - cypress-test-storybook
            - test
          context: org-global
          filters:
            branches:
              only:
                - staging
      - deploy-doc-site:
          requires:
            - cypress-test-storybook
            - test
          context: org-global
          filters:
            branches:
              only:
                - master
            tags:
              ignore: /.*beta.*/
      # - deploy-beta-site:
      #     requires:
      #       - cypress-test-storybook
      #       - test
      #     context: org-global
      #     filters:
      #       branches:
      #         ignore: /.*/
      #       tags:
      #         only: /.*beta.*/
