version: 2
jobs:
  build:
    docker:
      - image: circleci/node:12.4.0-browsers
    steps:
      - checkout
      - run:
          name: Build
          command: |
            cp ci/.npmrc .npmrc
            yarn install --frozen-lockfile
            yarn bootstrap
      - persist_to_workspace:
          root: "."
          paths:
            - ./**
  test:
    docker:
      - image: circleci/node:12.4.0-browsers
    steps:
      - attach_workspace:
          at: "."
      - run:
          name: Lint
          command: yarn lint
      - run:
          name: Lint commits
          command: yarn commitlint:ci
      - run:
          name: Test
          command: yarn test
      - run:
          name: Check types
          command: yarn type-check
  upload-to-percy:
    docker:
      - image: circleci/node:12.4.0-browsers
    steps:
      - attach_workspace:
          at: "."
      - run:
          name: Upload to percy
          command: yarn percy
  deploy-staging-site:
    docker:
      - image: ${STAGING_ECR_URL}/docker-deploy
        aws_auth:
          aws_access_key_id: $STAGING_AWS_ACCESS_KEY_ID
          aws_secret_access_key: $STAGING_AWS_SECRET_ACCESS_KEY
    environment:
      BUCKET: waffles
      CLOUDFRONT_ID: E16EOD0ZWD0L66
    steps:
      - attach_workspace:
          at: "."
      - run:
          name: S3 Sync
          command: |
            export AWS_ACCESS_KEY_ID=${STAGING_AWS_ACCESS_KEY_ID}
            export AWS_SECRET_ACCESS_KEY=${STAGING_AWS_SECRET_ACCESS_KEY}
            aws s3 sync --delete --acl public-read packages/docs/catalog-doc-site/catalog/build s3://${BUCKET}.datacamp-staging.com/live
            #aws s3 sync --acl public-read packages/docs/catalog-doc-site/catalog/build/static/media s3://${BUCKET}.datacamp-staging.com/live/media
      - run:
          name: Invalidate Cache
          command: |
            export AWS_ACCESS_KEY_ID=$STAGING_AWS_ACCESS_KEY_ID
            export AWS_SECRET_ACCESS_KEY=$STAGING_AWS_SECRET_ACCESS_KEY
            aws cloudfront create-invalidation --distribution-id ${CLOUDFRONT_ID} --paths "/index.html"
  deploy-doc-site:
    docker:
      - image: ${STAGING_ECR_URL}/docker-deploy
        aws_auth:
          aws_access_key_id: $STAGING_AWS_ACCESS_KEY_ID
          aws_secret_access_key: $STAGING_AWS_SECRET_ACCESS_KEY
    environment:
      BUCKET: waffles
      CLOUDFRONT_ID: E596C189UKISL
    steps:
      - attach_workspace:
          at: "."
      - run:
          name: S3 Sync
          command: |
            export AWS_ACCESS_KEY_ID=${PROD_AWS_ACCESS_KEY_ID}
            export AWS_SECRET_ACCESS_KEY=${PROD_AWS_SECRET_ACCESS_KEY}
            aws s3 sync --delete --exclude "*le-components/*" --acl public-read packages/docs/catalog-doc-site/catalog/build s3://${BUCKET}.new.datacamp.com/live
            #aws s3 sync --acl public-read packages/docs/catalog-doc-site/catalog/build/static/media s3://${BUCKET}.new.datacamp.com/live/media
      - run:
          name: Invalidate Cache
          command: |
            export AWS_ACCESS_KEY_ID=$PROD_AWS_ACCESS_KEY_ID
            export AWS_SECRET_ACCESS_KEY=$PROD_AWS_SECRET_ACCESS_KEY
            aws cloudfront create-invalidation --distribution-id ${CLOUDFRONT_ID} --paths "/index.html"

workflows:
  version: 2
  build_and_deploy:
    jobs:
      - build:
          context: org-global
          filters:
            tags:
              only: /.*/
      - test:
          requires:
            - build
          context: org-global
          filters:
            tags:
              only: /.*/
      - hold-for-pr:
          type: approval
          context: org-global
          filters:
            tags:
              only: /.*/
      - upload-to-percy:
          requires:
            - build
            - hold-for-pr
          context: org-global
          filters:
            tags:
              only: /.*/
      - deploy-staging-site:
          requires:
            - test
          context: org-global
          filters:
            branches:
              only:
                - staging
      - deploy-doc-site:
          requires:
            - test
          context: org-global
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /.*/
